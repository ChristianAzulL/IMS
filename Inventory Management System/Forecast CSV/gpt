<!-- Date Range Form -->
<form method="GET" class="mb-3">
    <label class="form-label" for="timepicker2">Select Date Range</label>
    <input class="form-control datetimepicker" id="timepicker2" name="date_range" type="text" placeholder="dd/mm/yy to dd/mm/yy"
        data-options='{"mode":"range","dateFormat":"d/m/y","disableMobile":true}' />
    <button type="submit" class="btn btn-primary mt-2">Filter</button>
</form>

<?php
// Helper function to convert dd/mm/yy to Y-m-d
function convertToMySQLDate($dateStr) {
    $parts = explode('/', trim($dateStr));
    if (count($parts) === 3) {
        $day = str_pad($parts[0], 2, '0', STR_PAD_LEFT);
        $month = str_pad($parts[1], 2, '0', STR_PAD_LEFT);
        $year = strlen($parts[2]) === 2 ? '20' . $parts[2] : $parts[2];
        return "$year-$month-$day";
    }
    return null;
}

// Handle date range from GET
$start_date = date('Y-m-d', strtotime('-30 days'));
$end_date = date('Y-m-d');

if (isset($_GET['date_range'])) {
    $dates = explode('to', $_GET['date_range']);
    if (count($dates) === 2) {
        $start_date = convertToMySQLDate($dates[0]);
        $end_date = convertToMySQLDate($dates[1]);
    }
}

echo "<div><strong>Selected Range:</strong> " . htmlspecialchars($start_date) . " to " . htmlspecialchars($end_date) . "</div><br>";

// Reuse your lead time code here...
$import_lead_time_query = "
    SELECT 
        IFNULL(AVG(TIMESTAMPDIFF(DAY, po.date_order, po.date_received)), 0) AS avg_import_days
    FROM purchased_order po
    LEFT JOIN supplier s ON s.hashed_id = po.supplier
    WHERE s.local_international = 'International' AND po.date_received IS NOT NULL
";
$import_lead_time_res = $conn->query($import_lead_time_query);
$import_lead_time = ($import_lead_time_res->num_rows > 0) ? round($import_lead_time_res->fetch_assoc()['avg_import_days']) : 0;

$local_lead_time_query = "
    SELECT 
        IFNULL(AVG(TIMESTAMPDIFF(DAY, po.date_order, po.date_received)), 0) AS avg_local_days
    FROM purchased_order po
    LEFT JOIN supplier s ON s.hashed_id = po.supplier
    WHERE s.local_international = 'Local' AND po.date_received IS NOT NULL
";

foreach ($warehouse_ids_array as $forecast_warehouse) {
    $product_query = "
        SELECT 
            p.hashed_id AS product_id, 
            p.description, 
            p.product_img, 
            p.parent_barcode, 
            b.brand_name, 
            c.category_name, 
            s.safety, 
            s.warehouse, 
            COUNT(CASE WHEN s.item_status = 0 AND s.warehouse = '$forecast_warehouse' THEN 1 END) AS current_available_qty,
            daily_avg.avg_sales_per_day AS average_sales_count_per_day,
            SUM(CASE WHEN po.status NOT IN (0, 4) THEN poc.qty ELSE 0 END) AS incoming_stocks,
            w.warehouse_name,
            s2.local_international AS supplier_origin
        FROM product p 
        LEFT JOIN brand b ON b.hashed_id = p.brand 
        LEFT JOIN category c ON c.hashed_id = p.category 
        LEFT JOIN stocks s ON s.product_id = p.hashed_id 
        LEFT JOIN warehouse w ON w.hashed_id = s.warehouse
        LEFT JOIN (
            SELECT 
                s.product_id,
                ol.warehouse,
                COUNT(oc.unique_barcode) / DATEDIFF('$end_date', '$start_date') AS avg_sales_per_day
            FROM outbound_logs ol
            JOIN outbound_content oc ON oc.hashed_id = ol.hashed_id
            JOIN stocks s ON s.unique_barcode = oc.unique_barcode
            WHERE oc.status = 0
            AND DATE(ol.date_sent) BETWEEN '$start_date' AND '$end_date'
            GROUP BY s.product_id, ol.warehouse
        ) AS daily_avg 
            ON daily_avg.product_id = p.hashed_id 
            AND daily_avg.warehouse = '$forecast_warehouse'
        LEFT JOIN purchased_order_content poc ON poc.product_id = p.hashed_id
        LEFT JOIN purchased_order po ON po.id = poc.po_id
        LEFT JOIN supplier s2 ON s2.hashed_id = po.supplier
        GROUP BY p.hashed_id, p.description, p.product_img, b.brand_name, c.category_name, s.safety, s.warehouse, daily_avg.avg_sales_per_day, s2.local_international
    ";

    $product_res = $conn->query($product_query);
    if ($product_res->num_rows > 0) {
        while ($row = $product_res->fetch_assoc()) {
            $product_id = $row['product_id'];
            $description = $row['description'];
            $product_img = $row['product_img'] ?? 'def_img.png';
            $parent_barcode = $row['parent_barcode'];
            $brand_name = $row['brand_name'];
            $category_name = $row['category_name'];
            $safety = $row['safety'];
            $warehouse = $row['warehouse'];
            $available_qty = $row['current_available_qty'];
            $average_daily_outbound_qty = $row['average_sales_count_per_day'] ?: 0;
            $incoming_stocks = $row['incoming_stocks'];
            $warehouse_name = $row['warehouse_name'];
            $supplier_origin = $row['supplier_origin'];

            // Historical sales filtered by selected date range
            $sales_query = "
                SELECT DATE(ol.date_sent) AS sale_date, COUNT(*) AS qty_sold
                FROM outbound_logs ol
                JOIN outbound_content oc ON oc.hashed_id = ol.hashed_id
                JOIN stocks s ON s.unique_barcode = oc.unique_barcode
                WHERE oc.status = 0 
                AND s.product_id = '$product_id'
                AND s.warehouse = '$warehouse'
                AND DATE(ol.date_sent) BETWEEN '$start_date' AND '$end_date'
                GROUP BY DATE(ol.date_sent)
                ORDER BY sale_date ASC
            ";

            // Build sales_data array with dynamic range
            $sales_res = $conn->query($sales_query);
            $sales_data = [];

            $days_diff = (strtotime($end_date) - strtotime($start_date)) / 86400;
            for ($i = 0; $i <= $days_diff; $i++) {
                $date = date('Y-m-d', strtotime($start_date . " +$i days"));
                $sales_data[$date] = 0;
            }

            if ($sales_res->num_rows > 0) {
                while ($sale_row = $sales_res->fetch_assoc()) {
                    $sales_data[$sale_row['sale_date']] = $sale_row['qty_sold'];
                }
            }

            // Compute moving avg from last 7 days in selected range
            $last_7_days_sales = array_slice($sales_data, -7);
            $total_7_days = array_sum($last_7_days_sales);
            $moving_avg = $total_7_days / 7;

            $forecast_30_days = round($moving_avg * 30);
            $days_to_stockout = $moving_avg > 0 ? round($available_qty / $moving_avg) : 'âˆž';

            $lead_time = ($supplier_origin == 'Local') ? $local_lead_time : $import_lead_time;
            $reorder_point = ($moving_avg * $lead_time) + $safety;
            $total_future_stock = $available_qty + $incoming_stocks;
            $needs_reorder = ($total_future_stock < $reorder_point) ? 'Yes' : 'No';

            echo '<tr>
                <td><img class="img" src="../../assets/img/' . $product_img . '" style="height: 30px;" alt=""></td>
                <td>' . $description . '</td>
                <td>' . $category_name . '</td>
                <td>' . $brand_name . '</td>
                <td>' . $parent_barcode . '</td>
                <td>' . $safety . '</td>
                <td>' . $warehouse_name . '</td>
                <td>' . $available_qty . '</td>
                <td>' . number_format($moving_avg, 2) . '</td>
                <td>' . $incoming_stocks . '</td>
                <td>' . $forecast_30_days . '</td>
                <td>' . $days_to_stockout . '</td>
                <td><span class="badge bg-' . ($needs_reorder == 'Yes' ? 'danger' : 'success') . '">' . $needs_reorder . '</span></td>
            </tr>';
        }
    }
}
?>
